NAME-UDIT KHANDELWAL										ASSIGNMENT-22 (DYNAMIC MEMORY ALLOCATION)


1. Define a function to input variable length string and store it in an array without
memory wastage.

#include<stdio.h>
#include<conio.h>
#include<string.h>
#include<stdlib.h>
int main()
{
    int i=0,j=1;
    char *s,c;
    printf("enter string:");
    s=(char*)malloc(sizeof(char));
    while(c!='\n')
    {
        c=getc(stdin);
        j++;
        s=(char*)realloc(s,j*sizeof(char));
        s[i]=c;
        i++;
    }
    s[i]='\0';
    printf("string is: %s",s);
    getch();
}


2. Write a program to ask the user to input a number of data values he would like to
enter then create an array dynamically to accommodate the data values. Now take
the input from the user and display the average of data values.

#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
int main()
{
    int i=0,size,sum=0;
    float avg;
    int *p;
    printf("enter size of array:");
    scanf("%d",&size);
    p=(int*)calloc(size,sizeof(int));
    if(p==NULL)
    {
        printf("memory not allocated");
        return 0;
    }
    else
    {
        printf("enter numbers:\n");
        for(i=0;i<size;i++)
        {
            scanf("%d",p+i);
        }
        for(i=0;i<size;i++)
        {
            sum+=p[i];
        }
        avg=sum/size;
        printf("average of numbers is: %f",avg);
    }
    free(p);
    getch();
}



3. Write a program to calculate the sum of n numbers entered by the user using malloc
and free.

#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
int main()
{
    int i=0,size,sum=0;
    int *p;
    printf("enter size of array:");
    scanf("%d",&size);
    p=(int*)malloc(size*sizeof(int));
    if(p==NULL)
    {
        printf("memory not allocated");
        return 0;
    }
    else
    {
        printf("enter numbers:");
        while(i<size)
        {
            scanf("%d",p+i);
            i++;
        }
        for(i=0;i<size;i++)
        {
            sum+=p[i];
        }
    }
    printf("\nsum is:%d",sum);
    free(p);
    getch();
}



4. Write a program to input and print text using dynamic memory allocation.

#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#include<string.h>
int main()
{
    int i=0;
    char c;
    char *p;
    printf("enter text:");
    p=(char*)malloc(sizeof(char));
    while(c!='\n')
    {
        c=getc(stdin);
        p=(char*)realloc(p,(i+1)*sizeof(char));
        p[i]=c;
        i++;
    }
    p[i]='\0';
    printf("string is:");
    for(i=0;i<strlen(p);i++)
        printf("%c",p[i]);
    free(p);
    getch();
}


5. Write a program to read a one dimensional array, print sum of all elements along with
inputted array elements using dynamic memory allocation.

#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
int main()
{
    int i=0,size,sum=0;
    int *p;
    printf("enter size of array:");
    scanf("%d",&size);
    p=(int*)calloc(size,sizeof(int));
    if(p==NULL)
    {
        printf("memory not allocated");
        return 0;
    }
    else
    {
        printf("enter numbers:\n");
        for(i=0;i<size;i++)
        {
            scanf("%d",p+i);
        }
        printf("array numbers are:");
        for(i=0;i<size;i++)
        {
            printf("%d ",p[i]);
            sum+=p[i];
        }
        printf("\nsum of all numbers in array is: %d",sum);
    }
    free(p);
    getch();
}


6. Write a program in C to find the largest element using Dynamic Memory Allocation.

#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
int main()
{
    int i=0,size,max=0;
    int *p;
    printf("enter size of array:");
    scanf("%d",&size);
    p=(int*)calloc(size,sizeof(int));
    if(p==NULL)
    {
        printf("memory not allocated");
        return 0;
    }
    else
    {
        printf("enter numbers:\n");
        for(i=0;i<size;i++)
        {
            scanf("%d",p+i);
        }
        max=p[0];
        for(i=0;i<size;i++)
        {
            if(max<p[i])
                max=p[i];
        }
        printf("largest number in array is: %d",max);
    }
    free(p);
    getch();
}


7. Write a program to demonstrate memory leak in C.

#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
int main()
{
    int *p;
    p=(int*)malloc(sizeof(int));
    p=NULL;
    getch();
}


8. Write a program to demonstrate dangling pointers in C.

#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
int main()
{
    int *p;
    p=(int*)malloc(sizeof(int));
    *p=100;
    printf("value in p is:%d",*p);
    free(p);
    printf("\nvalue in p after free is:%d",*p);
    getch();
}


9. Write a program to allocate memory dynamically of the size in bytes entered by the
user. Also handle the case when memory allocation is failed.

#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
int main()
{
    int i,*p,size;
    printf("enter size of array:");
    scanf("%d",&size);
    p=(int*)calloc(size,sizeof(int));
    p=NULL;
    if(p==NULL)
        printf("memory allocation failed");
    else
    {
        for(i=0;i<size;i++)
            printf("address allocated is:%d\n",p+i);
    }
    getch();
}


10. Find out the maximum and minimum from an array using dynamic memory allocation
in C.

#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
int main()
{
    int i,j,*p,size,min,max;
    printf("enter size of array:");
    scanf("%d",&size);
    p=(int*)calloc(size,sizeof(int));
    if(p==NULL)
        printf("memory allocation failed");
    else
    {
        printf("enter numbers of array:");
        for(i=0;i<size;i++)
            scanf("%d",p+i);
        min=p[0];
        max=p[0];
        for(i=0;i<size;i++)
        {
            if(min>p[i])
                min=p[i];
            if(max<p[i])
                max=p[i];
        }
        printf("minimum number in array is: %d\n",min);
        printf("maximum number in array is: %d",max);
    }
    getch();
}

